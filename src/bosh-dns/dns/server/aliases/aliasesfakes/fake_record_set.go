// This file was generated by counterfeiter
package aliasesfakes

import (
	"bosh-dns/dns/server/aliases"
	"bosh-dns/dns/server/records"
	"sync"
)

type FakeRecordSet struct {
	ResolveStub        func(string) ([]string, error)
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		arg1 string
	}
	resolveReturns struct {
		result1 []string
		result2 error
	}
	resolveReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ResolveFullRecordStub        func(string) ([]records.Record, error)
	resolveFullRecordMutex       sync.RWMutex
	resolveFullRecordArgsForCall []struct {
		arg1 string
	}
	resolveFullRecordReturns struct {
		result1 []records.Record
		result2 error
	}
	resolveFullRecordReturnsOnCall map[int]struct {
		result1 []records.Record
		result2 error
	}
	DomainsStub        func() []string
	domainsMutex       sync.RWMutex
	domainsArgsForCall []struct{}
	domainsReturns     struct {
		result1 []string
	}
	domainsReturnsOnCall map[int]struct {
		result1 []string
	}
	SubscribeStub        func() <-chan bool
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct{}
	subscribeReturns     struct {
		result1 <-chan bool
	}
	subscribeReturnsOnCall map[int]struct {
		result1 <-chan bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecordSet) Resolve(arg1 string) ([]string, error) {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Resolve", []interface{}{arg1})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resolveReturns.result1, fake.resolveReturns.result2
}

func (fake *FakeRecordSet) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeRecordSet) ResolveArgsForCall(i int) string {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].arg1
}

func (fake *FakeRecordSet) ResolveReturns(result1 []string, result2 error) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) ResolveReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) ResolveFullRecord(arg1 string) ([]records.Record, error) {
	fake.resolveFullRecordMutex.Lock()
	ret, specificReturn := fake.resolveFullRecordReturnsOnCall[len(fake.resolveFullRecordArgsForCall)]
	fake.resolveFullRecordArgsForCall = append(fake.resolveFullRecordArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResolveFullRecord", []interface{}{arg1})
	fake.resolveFullRecordMutex.Unlock()
	if fake.ResolveFullRecordStub != nil {
		return fake.ResolveFullRecordStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resolveFullRecordReturns.result1, fake.resolveFullRecordReturns.result2
}

func (fake *FakeRecordSet) ResolveFullRecordCallCount() int {
	fake.resolveFullRecordMutex.RLock()
	defer fake.resolveFullRecordMutex.RUnlock()
	return len(fake.resolveFullRecordArgsForCall)
}

func (fake *FakeRecordSet) ResolveFullRecordArgsForCall(i int) string {
	fake.resolveFullRecordMutex.RLock()
	defer fake.resolveFullRecordMutex.RUnlock()
	return fake.resolveFullRecordArgsForCall[i].arg1
}

func (fake *FakeRecordSet) ResolveFullRecordReturns(result1 []records.Record, result2 error) {
	fake.ResolveFullRecordStub = nil
	fake.resolveFullRecordReturns = struct {
		result1 []records.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) ResolveFullRecordReturnsOnCall(i int, result1 []records.Record, result2 error) {
	fake.ResolveFullRecordStub = nil
	if fake.resolveFullRecordReturnsOnCall == nil {
		fake.resolveFullRecordReturnsOnCall = make(map[int]struct {
			result1 []records.Record
			result2 error
		})
	}
	fake.resolveFullRecordReturnsOnCall[i] = struct {
		result1 []records.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) Domains() []string {
	fake.domainsMutex.Lock()
	ret, specificReturn := fake.domainsReturnsOnCall[len(fake.domainsArgsForCall)]
	fake.domainsArgsForCall = append(fake.domainsArgsForCall, struct{}{})
	fake.recordInvocation("Domains", []interface{}{})
	fake.domainsMutex.Unlock()
	if fake.DomainsStub != nil {
		return fake.DomainsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.domainsReturns.result1
}

func (fake *FakeRecordSet) DomainsCallCount() int {
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	return len(fake.domainsArgsForCall)
}

func (fake *FakeRecordSet) DomainsReturns(result1 []string) {
	fake.DomainsStub = nil
	fake.domainsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRecordSet) DomainsReturnsOnCall(i int, result1 []string) {
	fake.DomainsStub = nil
	if fake.domainsReturnsOnCall == nil {
		fake.domainsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.domainsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRecordSet) Subscribe() <-chan bool {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct{}{})
	fake.recordInvocation("Subscribe", []interface{}{})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.subscribeReturns.result1
}

func (fake *FakeRecordSet) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeRecordSet) SubscribeReturns(result1 <-chan bool) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan bool
	}{result1}
}

func (fake *FakeRecordSet) SubscribeReturnsOnCall(i int, result1 <-chan bool) {
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 <-chan bool
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 <-chan bool
	}{result1}
}

func (fake *FakeRecordSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	fake.resolveFullRecordMutex.RLock()
	defer fake.resolveFullRecordMutex.RUnlock()
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRecordSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aliases.RecordSet = new(FakeRecordSet)
